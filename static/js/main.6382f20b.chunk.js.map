{"version":3,"sources":["components/header/Logo.js","components/header/Header.js","utils.js","components/content/Box.js","components/content/About.js","components/content/Content.js","App.js","serviceWorker.js","index.js"],"names":["Logo","Wrapper","Fox","Js","Dev","styled","Header","THEME","primary","text","Box","Message","Strong","About","Title","Welcome","Content","Container","color","small","display","flex","flexFlow","backgroundColor","height","position","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2yBAGO,IAAMA,EAAO,kBAChB,kBAACC,EAAD,KACI,kBAACC,EAAD,YACA,kBAACC,EAAD,WACA,kBAACC,EAAD,eAIFH,EAAUI,YAAO,KAAPA,CAAH,KAMPH,EAAMG,YAAO,OAAPA,CAAH,KAMHD,EAAMC,YAAO,OAAPA,CAAH,KAIHF,EAAKE,YAAO,OAAPA,CAAH,K,oNCtBR,IAMeC,EANA,kBACX,kBAAC,EAAD,KACI,kBAAC,EAAD,QAMFL,EAAUI,YAAO,MAAPA,CAAH,KCbAE,EACF,CACHC,QAAS,OACTC,KAAM,WAHDF,EAKH,CACFC,QAAS,UACTC,KAAM,W,4vBCJd,IASeC,EATH,kBACR,kBAAC,EAAD,KACI,kBAACC,EAAD,2BAGA,kBAACC,EAAD,uBAMFX,EAAUI,YAAO,MAAPA,CAAH,KAmBPM,EAAUN,YAAO,OAAPA,CAAH,KAIPO,EAASP,YAAO,SAAPA,CAAH,K,seClCZ,IASeQ,EATD,kBACV,kBAAC,EAAD,KACI,kBAACC,EAAD,sBACA,kBAACC,EAAD,mEAQFd,EAAUI,YAAO,MAAPA,CAAH,KASPS,EAAQT,YAAO,KAAPA,CAAH,KAMLU,EAAUV,YAAO,IAAPA,CAAH,K,4ICnBb,IAWeW,EAXC,kBACZ,kBAAC,EAAD,KACI,kBAACC,EAAD,CAAWC,MAAOX,EAAYC,QAASW,OAAK,GACxC,kBAAC,EAAD,OAEJ,kBAACF,EAAD,CAAWC,MAAOX,EAAWC,SACzB,kBAAC,EAAD,SAONP,EAAUI,YAAO,MAAPA,CAAH,KAMPY,EAAYZ,YAAO,MAAPA,EAAc,gBAAGa,EAAH,EAAGA,MAAH,MAAuB,CACnDE,QAAS,OACTC,KAF4B,EAAUF,MAExB,IAAM,IACpBG,SAAU,aACVC,gBAAiBL,EACjBM,OAAQ,QACRC,SAAU,e,MCnBCC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6382f20b.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\"\n\nexport const Logo = () => (\n    <Wrapper>\n        <Fox>fox</Fox>\n        <Js>js</Js>\n        <Dev>.dev</Dev>\n    </Wrapper>    \n);\n\nconst Wrapper = styled(\"h3\")`\n    display: flex;\n    padding: 20px 10px;\n    margin: 0 0 0 40px;\n`;\n\nconst Fox = styled(\"span\")`\n    font-size: 24px;\n    color: #ffab00;\n    letter-spacing: 3px;\n    font-weight: bold;\n`\nconst Dev = styled(\"span\")`\n    font-size: 24px;\n    color: #263238;\n`\nconst Js = styled(\"span\")`\n    \n    font-size: 24px;\n    color: #607d8b;\n    text-transform: uppercase;\n    \n`","import React from \"react\";\nimport styled from \"@emotion/styled\"\n\nimport { Logo } from \"./Logo\";\n\nconst Header = () => (\n    <Wrapper>\n        <Logo />\n    </Wrapper>\n);\n\nexport default Header;\n\nconst Wrapper = styled(\"div\")`\n    position: fixed;\n    z-index: 1;\n    display: flex;\n    flex-flow: column nowrap;\n    flex: 1 1 auto;\n    background: transparent;\n`;\n","export const THEME = {\n    LIGHT: {\n        primary: \"#fff\",\n        text: \"#212121\"\n    },\n    DARK: {\n        primary: \"#263238\",\n        text: \"#fafafa\"\n    }\n}","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Box = () => (\n    <Wrapper>\n        <Message>\n            Make it simple but\n        </Message>\n        <Strong>significant.</Strong>\n    </Wrapper>\n);\n\nexport default Box;\n\nconst Wrapper = styled(\"div\")`\n    display: flex;\n    flex: 1 1 auto;\n    flex-flow: column nowrap;\n    justify-content: center;\n    width: 35vw;\n    height: 45vh;\n    padding: 30px;\n    margin: 0;\n    border-radius: 3px;\n    position: absolute;\n    z-index: 1;\n    top: calc(50% - 25vh);\n    bottom: 0;\n    left: 50px;\n    box-shadow: -1px 2px 20px 0px #dbe5ea;\n    background: #fff;\n`;\n\nconst Message = styled(\"span\")`\n    font-size: 56px;\n    color: #263238;\n`\nconst Strong = styled(\"strong\")`\n    font-size: 56px;\n    color: #263238;\n    font-weight: bold;\n    text-transform: uppercase;\n    text-shadow: 8px 8px 3px #dbe5ea;\n`","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst About = () => (\n    <Wrapper>\n        <Title>Hello, there!</Title>\n        <Welcome>\n            I'm Piotr and I'm a Senior Frontend Developer at Egnyte.\n        </Welcome>\n    </Wrapper>\n);\n\nexport default About;\n\nconst Wrapper = styled(\"div\")`\n    display: flex;\n    flex: 1 1 auto;\n    flex-flow: column nowrap;\n    justify-content: center;\n    padding-left: 20%;\n    text-align: left;\n`;\n\nconst Title = styled(\"h4\")`\n    font-size: 32px;\n    color: #eceff1;\n    padding: 10px 0;\n    margin: 0;\n`\nconst Welcome = styled(\"p\")`\n    font-size: 16px;\n    color: #eceff1;\n`","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\n\n\nimport { THEME } from \"../../utils\";\nimport Box from \"./Box\";\nimport About from \"./About\";\n\n\nconst Content = () => (\n    <Wrapper>\n        <Container color={THEME.LIGHT.primary} small>\n            <Box />\n        </Container>\n        <Container color={THEME.DARK.primary}>\n            <About />\n        </Container>\n    </Wrapper>\n);\n\nexport default Content;\n\nconst Wrapper = styled(\"div\")`\n    display: flex;\n    flex-flow: row nowrap;\n    flex: 1 1 auto;\n`;\n\nconst Container = styled(\"div\")(({ color, small }) => ({\n    display: \"flex\",\n    flex: small ? \"1\" : \"2\",\n    flexFlow: \"row nowrap\",\n    backgroundColor: color,\n    height: \"100vh\",\n    position: \"relative\",\n}));\n","import React from 'react';\n\nimport Header from \"./components/header\"\nimport Content from './components/content/Content';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}